% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mpanel_e61.R
\name{mpanel_e61}
\alias{mpanel_e61}
\title{Create a multi-panel graph with e61 formatting}
\usage{
mpanel_e61(
  ...,
  plotlist = NULL,
  title = NULL,
  subtitle = NULL,
  footnotes = NULL,
  sources = NULL,
  title_max_char = 90,
  subtitle_max_char = 90,
  footnote_max_char = 130,
  title_wrap = TRUE,
  subtitle_wrap = TRUE,
  footnote_wrap = TRUE,
  title_adj = 1.1,
  ncol = 2,
  nrow = NULL,
  rel_heights = NULL,
  align = c("v", "none", "h", "hv"),
  axis = c("none", "l", "r", "t", "b", "lr", "tb", "tblr")
)
}
\arguments{
\item{...}{Plot objects to put on the panel.}

\item{plotlist}{(optional) List of plots to display. Alternatively, the plots can be provided
individually as the first n arguments of the function plot_grid (see examples).}

\item{title}{The text for the title.}

\item{subtitle}{The text for the subtitle.}

\item{footnotes}{A vector of footnote text strings. Each new string will be
prepended with *, **, ***, etc. Note you'll need to include the asterisks
in the title/subtitle yourself. Please be sensible with the number of
separate points you include in the graph.}

\item{sources}{String vector providing the names of sources for the graph.}

\item{title_max_char, subtitle_max_char, footnote_max_char}{Numeric. Set the
maximum number of characters per line in the title, subtitle, sources or
footnotes. The default is roughly appropriate for the default graph
dimensions in \code{\link[theme61]{e61_save}}.}

\item{title_wrap, subtitle_wrap, footnote_wrap}{Logical. Enables text wrapping
for the title, subtitle, sources or footnotes. Defaults to TRUE.}

\item{title_adj}{Rescales the size of the title text to be slightly larger
than the titles of the subplots (default is 1.1). 2 doubles the font size.}

\item{ncol}{(optional) Number of columns in the plot grid.}

\item{nrow}{(optional) Number of rows in the plot grid.}

\item{rel_heights}{A numeric vector giving the relative proportions of each
graph component (title, plots, footer (optional)). See the Details for more
detail.}

\item{align}{(optional) Specifies whether graphs in the grid should be horizontally ("h") or
vertically ("v") aligned. Options are "none" (default), "hv" (align in both directions), "h", and "v".}

\item{axis}{(optional) Specifies whether graphs should be aligned by the left ("l"), right ("r"), top ("t"), or bottom ("b")
margins. Options are "none" (default), or a string of any combination of l, r, t, and b in any order (e.g. "tblr" or "rlbt" for aligning all margins).
Must be specified if any of the graphs are complex (e.g. faceted) and alignment is specified and desired. See \code{\link[cowplot:align_plots]{align_plots()}} for details.}
}
\value{
ggplot2 object
}
\description{
Wrapper around \link[cowplot]{plot_grid} and \code{labs_e61} to
  create multi-panel graphs with appropriate title and footer formatting.

  This function is designed for creating 2x2 panel graphs, although it should
  work for any arrangement of panels (e.g. 2x1, 3x2, etc.). Your mileage may
  vary.

  When saving multi-panel graphs using \code{save_e61()} you will need to
  change (increase) the width and height arguments to reflect the larger size
  of multi-panel graphs.
}
\details{
\strong{Read this if your titles and stuff are getting cut off.}

  The function tries to be smart when setting the values for
  \code{rel_heights}, but it can be incorrect due to differences in the
  amount of text in each component.

  The way \code{mpanel_e61} works is that the title, subtitle, graph panels
  and footers are all separate components that are then put together after
  they have been independently generated. The purpose of \code{rel_heights}
  is to specify what proportion of the final plot each of these components
  require. As a result, if the values are too small for a given component,
  part of it will get visually cut off.

  The function tries to increase the amount of space given to a component if,
  for example, your title has two lines, or you write a really long footnote
  that spans many lines of text. But this is an inexact science. In all
  likelihood, you will need to specify your own values, which why this
  paragraph of text tries to explain the underlying function so you aren't
  just blindly inputting numbers.

  The default values for \code{rel_heights} for a 1-line title, 1-line
  subtitle, 1-line footnote and 1-line sources list is \code{c(0.05, 0.05, 1,
  0.1)}. If you only have a title and footnotes/sources then only 3 values
  are needed: \code{c(0.05, 1, 0.1)}.

  These values are all relative ratios, meaning, in the second example, the
  title gets \eqn{\frac{0.05}{1.15}}, or around 4 per cent of the total graph
  height. This means that if your graph panels are really tall (e.g. you make
  a 3x2 multi-panel), you will need to reduce the share of the space
  allocated to the titles or you will have extra whitespace (I think? Haven't
  actually tested this).
}
\examples{
 gg <- ggplot2::ggplot() +
   labs_e61(title = "Figure", y = "\%") +
   scale_y_continuous_e61(limits = c(0, 10, 2.5)) +
   theme_e61()

 mpanel_e61(gg, gg, gg, gg,
   title = "Multi-panel graph title",
   subtitle = "Graph subtitle",
   footnotes = c("Footnote 1", "Footnote 2"),
   sources = c("Source 1", "Source 2"))
}
